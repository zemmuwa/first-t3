import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";
import { useState } from "react";

const Form = () => {
  const [message, setMessage] = useState("");
  const { data: session, status } = useSession();
  const utils = api.useContext();
  const postMessage = api.guestbook.postMessage.useMutation({
    onMutate: async (newEntry) => {
      await utils.guestbook.getAll.cancel();
      // utils.guestbook.getAll.setData(undefined, (prevEntries) => {
      //   if (prevEntries) {
      //     return {
      //       data: [newEntry, ...prevEntries.data],
      //       meta: prevEntries.meta,
      //     };
      //   } else {
      //     return {
      //       data: [newEntry],
      //       meta: prevEntries?.meta,
      //     };
      //   }
      // });
    },
    onSettled: async () => {
      await utils.guestbook.getAll.invalidate();
    },
  });

  if (status !== "authenticated") return null;

  return (
    <form
      className="flex gap-2"
      onSubmit={(event) => {
        event.preventDefault();
        postMessage.mutate({
          name: session.user?.name as string,
          message,
        });
        setMessage("");
      }}
    >
      <input
        type="text"
        className="rounded-md border-2 border-zinc-800 bg-neutral-900 px-4 py-2 focus:outline-none"
        placeholder="Your message..."
        minLength={2}
        maxLength={100}
        value={message}
        onChange={(event) => setMessage(event.target.value)}
      />
      <button
        type="submit"
        className="rounded-md border-2 border-zinc-800 p-2 focus:outline-none"
      >
        Submit
      </button>
    </form>
  );
};

const Home: NextPage = () => {
  const { data: session, status } = useSession();
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  if (status === "loading") {
    return <main>Loading...</main>;
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Guestbook</h1>
        <div>
          {session ? (
            <>
              <p>hi {session.user?.name}</p>
              <button
                onClick={() => {
                  signOut().catch(console.log);
                }}
              >
                Logout
              </button>
              <div className="pt-6">
                <Form />
              </div>
            </>
          ) : (
            <>
              <input
                value={username}
                onChange={(ev) => setUsername(ev.target.value)}
                type="text"
              />
              <input
                value={password}
                onChange={(ev) => setPassword(ev.target.value)}
                type="text"
              />
              <button
                onClick={() => {
                  signIn("credentials", {
                    username: username,
                    password: password,
                    redirect: false,
                  }).catch(console.log);
                }}
              >
                Login
              </button>
              <button
                onClick={() => {
                  signIn("discord").catch(console.log);
                }}
              >
                Login with Discord
              </button>
              <button
                onClick={() => {
                  signIn("auth0").catch(console.log);
                }}
              >
                Login with Auth0
              </button>
            </>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;
